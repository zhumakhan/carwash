// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeCarwashesModels(in *jlexer.Lexer, out *Workers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Workers":
			if in.IsNull() {
				in.Skip()
				out.Workers = nil
			} else {
				in.Delim('[')
				if out.Workers == nil {
					if !in.IsDelim(']') {
						out.Workers = make([]Worker, 0, 1)
					} else {
						out.Workers = []Worker{}
					}
				} else {
					out.Workers = (out.Workers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Worker
					(v1).UnmarshalEasyJSON(in)
					out.Workers = append(out.Workers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels(out *jwriter.Writer, in Workers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Workers\":"
		out.RawString(prefix[1:])
		if in.Workers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Workers {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Workers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels1(in *jlexer.Lexer, out *Worker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "WashID":
			out.WashID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels1(out *jwriter.Writer, in Worker) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"WashID\":"
		out.RawString(prefix)
		out.Uint(uint(in.WashID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Worker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Worker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Worker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Worker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels1(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels2(in *jlexer.Lexer, out *WashOwners) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Owners":
			if in.IsNull() {
				in.Skip()
				out.Owners = nil
			} else {
				in.Delim('[')
				if out.Owners == nil {
					if !in.IsDelim(']') {
						out.Owners = make([]Owner, 0, 1)
					} else {
						out.Owners = []Owner{}
					}
				} else {
					out.Owners = (out.Owners)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Owner
					(v4).UnmarshalEasyJSON(in)
					out.Owners = append(out.Owners, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels2(out *jwriter.Writer, in WashOwners) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Owners\":"
		out.RawString(prefix[1:])
		if in.Owners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Owners {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WashOwners) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WashOwners) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WashOwners) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WashOwners) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels2(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "SecondName":
			out.SecondName = string(in.String())
		case "MiddleName":
			out.MiddleName = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "ConfirmPassword":
			out.ConfirmPassword = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "AccessToken":
			out.AccessToken = string(in.String())
		case "RefreshToken":
			out.RefreshToken = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"SecondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"MiddleName\":"
		out.RawString(prefix)
		out.String(string(in.MiddleName))
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.ConfirmPassword != "" {
		const prefix string = ",\"ConfirmPassword\":"
		out.RawString(prefix)
		out.String(string(in.ConfirmPassword))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"AccessToken\":"
		out.RawString(prefix)
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"RefreshToken\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	if true {
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels3(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels4(in *jlexer.Lexer, out *TopicSubscribe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "registration_tokens":
			if in.IsNull() {
				in.Skip()
				out.RegistrationTokens = nil
			} else {
				in.Delim('[')
				if out.RegistrationTokens == nil {
					if !in.IsDelim(']') {
						out.RegistrationTokens = make([]string, 0, 4)
					} else {
						out.RegistrationTokens = []string{}
					}
				} else {
					out.RegistrationTokens = (out.RegistrationTokens)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.RegistrationTokens = append(out.RegistrationTokens, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels4(out *jwriter.Writer, in TopicSubscribe) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix[1:])
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"registration_tokens\":"
		out.RawString(prefix)
		if in.RegistrationTokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.RegistrationTokens {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopicSubscribe) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopicSubscribe) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopicSubscribe) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopicSubscribe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels4(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels5(in *jlexer.Lexer, out *TopicPush) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "notification":
			easyjsonD2b7633eDecode(in, &out.Notification)
		case "time_to_live":
			out.TimeToLive = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels5(out *jwriter.Writer, in TopicPush) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix[1:])
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"notification\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode(out, in.Notification)
	}
	{
		const prefix string = ",\"time_to_live\":"
		out.RawString(prefix)
		out.Int(int(in.TimeToLive))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopicPush) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopicPush) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopicPush) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopicPush) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels5(l, v)
}
func easyjsonD2b7633eDecode(in *jlexer.Lexer, out *struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode(out *jwriter.Writer, in struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeCarwashesModels6(in *jlexer.Lexer, out *ServiceCost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Service":
			out.Service = uint(in.Uint())
		case "CarModel":
			out.CarModel = string(in.String())
		case "Cost":
			out.Cost = uint(in.Uint())
		case "Duration":
			out.Duration = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels6(out *jwriter.Writer, in ServiceCost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Service\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Service))
	}
	{
		const prefix string = ",\"CarModel\":"
		out.RawString(prefix)
		out.String(string(in.CarModel))
	}
	{
		const prefix string = ",\"Cost\":"
		out.RawString(prefix)
		out.Uint(uint(in.Cost))
	}
	{
		const prefix string = ",\"Duration\":"
		out.RawString(prefix)
		out.Uint(uint(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceCost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceCost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceCost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceCost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels6(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels7(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "CarWash":
			out.CarWash = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Costs":
			if in.IsNull() {
				in.Skip()
				out.Costs = nil
			} else {
				in.Delim('[')
				if out.Costs == nil {
					if !in.IsDelim(']') {
						out.Costs = make([]ServiceCost, 0, 1)
					} else {
						out.Costs = []ServiceCost{}
					}
				} else {
					out.Costs = (out.Costs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 ServiceCost
					(v10).UnmarshalEasyJSON(in)
					out.Costs = append(out.Costs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels7(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CarWash\":"
		out.RawString(prefix)
		out.Uint(uint(in.CarWash))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Costs\":"
		out.RawString(prefix)
		if in.Costs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Costs {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels7(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels8(in *jlexer.Lexer, out *PastBooking) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "CarWash":
			out.CarWash = uint(in.Uint())
		case "ClientUUID":
			out.ClientUUID = string(in.String())
		case "ClientFirstName":
			out.ClientFirstName = string(in.String())
		case "ClientSecondName":
			out.ClientSecondName = string(in.String())
		case "ClientMiddleName":
			out.ClientMiddleName = string(in.String())
		case "ClientPhone":
			out.ClientPhone = string(in.String())
		case "CarNumber":
			out.CarNumber = string(in.String())
		case "Cost":
			out.Cost = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "CarModel":
			out.CarModel = string(in.String())
		case "BookingServices":
			out.BookingServices = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels8(out *jwriter.Writer, in PastBooking) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CarWash\":"
		out.RawString(prefix)
		out.Uint(uint(in.CarWash))
	}
	{
		const prefix string = ",\"ClientUUID\":"
		out.RawString(prefix)
		out.String(string(in.ClientUUID))
	}
	{
		const prefix string = ",\"ClientFirstName\":"
		out.RawString(prefix)
		out.String(string(in.ClientFirstName))
	}
	{
		const prefix string = ",\"ClientSecondName\":"
		out.RawString(prefix)
		out.String(string(in.ClientSecondName))
	}
	{
		const prefix string = ",\"ClientMiddleName\":"
		out.RawString(prefix)
		out.String(string(in.ClientMiddleName))
	}
	{
		const prefix string = ",\"ClientPhone\":"
		out.RawString(prefix)
		out.String(string(in.ClientPhone))
	}
	{
		const prefix string = ",\"CarNumber\":"
		out.RawString(prefix)
		out.String(string(in.CarNumber))
	}
	{
		const prefix string = ",\"Cost\":"
		out.RawString(prefix)
		out.Uint(uint(in.Cost))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"CarModel\":"
		out.RawString(prefix)
		out.String(string(in.CarModel))
	}
	{
		const prefix string = ",\"BookingServices\":"
		out.RawString(prefix)
		out.String(string(in.BookingServices))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PastBooking) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PastBooking) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PastBooking) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PastBooking) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels8(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels9(in *jlexer.Lexer, out *OwnerWithWashes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Owner":
			(out.Owner).UnmarshalEasyJSON(in)
		case "Washes":
			if in.IsNull() {
				in.Skip()
				out.Washes = nil
			} else {
				in.Delim('[')
				if out.Washes == nil {
					if !in.IsDelim(']') {
						out.Washes = make([]CarWash, 0, 1)
					} else {
						out.Washes = []CarWash{}
					}
				} else {
					out.Washes = (out.Washes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 CarWash
					(v13).UnmarshalEasyJSON(in)
					out.Washes = append(out.Washes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels9(out *jwriter.Writer, in OwnerWithWashes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Owner\":"
		out.RawString(prefix[1:])
		(in.Owner).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Washes\":"
		out.RawString(prefix)
		if in.Washes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Washes {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OwnerWithWashes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OwnerWithWashes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OwnerWithWashes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OwnerWithWashes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels9(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels10(in *jlexer.Lexer, out *OwnerError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FirstName":
			out.FirstName = string(in.String())
		case "SecondName":
			out.SecondName = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "ConfirmPassword":
			out.ConfirmPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels10(out *jwriter.Writer, in OwnerError) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FirstName != "" {
		const prefix string = ",\"FirstName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	if in.SecondName != "" {
		const prefix string = ",\"SecondName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecondName))
	}
	if in.Phone != "" {
		const prefix string = ",\"Phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	if in.Email != "" {
		const prefix string = ",\"Email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.ConfirmPassword != "" {
		const prefix string = ",\"ConfirmPassword\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConfirmPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OwnerError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OwnerError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OwnerError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OwnerError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels10(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels11(in *jlexer.Lexer, out *Owner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "WashID":
			out.WashID = uint(in.Uint())
		case "FirstName":
			out.FirstName = string(in.String())
		case "SecondName":
			out.SecondName = string(in.String())
		case "MiddleName":
			out.MiddleName = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "ConfirmPassword":
			out.ConfirmPassword = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "AccessToken":
			out.AccessToken = string(in.String())
		case "RefreshToken":
			out.RefreshToken = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "Role":
			out.Role = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels11(out *jwriter.Writer, in Owner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"WashID\":"
		out.RawString(prefix)
		out.Uint(uint(in.WashID))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"SecondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"MiddleName\":"
		out.RawString(prefix)
		out.String(string(in.MiddleName))
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.ConfirmPassword != "" {
		const prefix string = ",\"ConfirmPassword\":"
		out.RawString(prefix)
		out.String(string(in.ConfirmPassword))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"AccessToken\":"
		out.RawString(prefix)
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"RefreshToken\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	if true {
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if in.Role != 0 {
		const prefix string = ",\"Role\":"
		out.RawString(prefix)
		out.Uint(uint(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Owner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Owner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Owner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Owner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels11(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels12(in *jlexer.Lexer, out *MonthlyPaymentHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "CarWash":
			out.CarWash = uint(in.Uint())
		case "Month":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Month).UnmarshalJSON(data))
			}
		case "Amount":
			out.Amount = uint(in.Uint())
		case "Status":
			out.Status = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels12(out *jwriter.Writer, in MonthlyPaymentHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"CarWash\":"
		out.RawString(prefix)
		out.Uint(uint(in.CarWash))
	}
	{
		const prefix string = ",\"Month\":"
		out.RawString(prefix)
		out.Raw((in.Month).MarshalJSON())
	}
	{
		const prefix string = ",\"Amount\":"
		out.RawString(prefix)
		out.Uint(uint(in.Amount))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Uint(uint(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MonthlyPaymentHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MonthlyPaymentHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MonthlyPaymentHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MonthlyPaymentHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels12(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels13(in *jlexer.Lexer, out *Histories) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "History":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]MonthlyPaymentHistory, 0, 1)
					} else {
						out.History = []MonthlyPaymentHistory{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v16 MonthlyPaymentHistory
					(v16).UnmarshalEasyJSON(in)
					out.History = append(out.History, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels13(out *jwriter.Writer, in Histories) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"History\":"
		out.RawString(prefix[1:])
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.History {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Histories) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Histories) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Histories) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Histories) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels13(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels14(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "SecondName":
			out.SecondName = string(in.String())
		case "MiddleName":
			out.MiddleName = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels14(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"SecondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"MiddleName\":"
		out.RawString(prefix)
		out.String(string(in.MiddleName))
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels14(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels15(in *jlexer.Lexer, out *CarWashesWithOwnerName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OwnerUUID":
			if in.IsNull() {
				in.Skip()
				out.OwnerUUID = nil
			} else {
				in.Delim('[')
				if out.OwnerUUID == nil {
					if !in.IsDelim(']') {
						out.OwnerUUID = make([]string, 0, 4)
					} else {
						out.OwnerUUID = []string{}
					}
				} else {
					out.OwnerUUID = (out.OwnerUUID)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.OwnerUUID = append(out.OwnerUUID, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Washes":
			if in.IsNull() {
				in.Skip()
				out.Washes = nil
			} else {
				in.Delim('[')
				if out.Washes == nil {
					if !in.IsDelim(']') {
						out.Washes = make([]CarWash, 0, 1)
					} else {
						out.Washes = []CarWash{}
					}
				} else {
					out.Washes = (out.Washes)[:0]
				}
				for !in.IsDelim(']') {
					var v20 CarWash
					(v20).UnmarshalEasyJSON(in)
					out.Washes = append(out.Washes, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels15(out *jwriter.Writer, in CarWashesWithOwnerName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OwnerUUID\":"
		out.RawString(prefix[1:])
		if in.OwnerUUID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.OwnerUUID {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Washes\":"
		out.RawString(prefix)
		if in.Washes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Washes {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CarWashesWithOwnerName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CarWashesWithOwnerName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CarWashesWithOwnerName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CarWashesWithOwnerName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels15(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels16(in *jlexer.Lexer, out *CarWashes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Washes":
			if in.IsNull() {
				in.Skip()
				out.Washes = nil
			} else {
				in.Delim('[')
				if out.Washes == nil {
					if !in.IsDelim(']') {
						out.Washes = make([]CarWash, 0, 1)
					} else {
						out.Washes = []CarWash{}
					}
				} else {
					out.Washes = (out.Washes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 CarWash
					(v25).UnmarshalEasyJSON(in)
					out.Washes = append(out.Washes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels16(out *jwriter.Writer, in CarWashes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Washes\":"
		out.RawString(prefix[1:])
		if in.Washes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Washes {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CarWashes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CarWashes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CarWashes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CarWashes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels16(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels17(in *jlexer.Lexer, out *CarWash) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Address":
			out.Address = string(in.String())
		case "Longitude":
			out.Longitude = float64(in.Float64())
		case "Latitude":
			out.Latitude = float64(in.Float64())
		case "Owner":
			out.Owner = string(in.String())
		case "Photo":
			out.Photo = string(in.String())
		case "Status":
			out.Status = uint(in.Uint())
		case "Services":
			if in.IsNull() {
				in.Skip()
				out.Services = nil
			} else {
				in.Delim('[')
				if out.Services == nil {
					if !in.IsDelim(']') {
						out.Services = make([]Service, 0, 1)
					} else {
						out.Services = []Service{}
					}
				} else {
					out.Services = (out.Services)[:0]
				}
				for !in.IsDelim(']') {
					var v28 Service
					(v28).UnmarshalEasyJSON(in)
					out.Services = append(out.Services, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CarTypes":
			if in.IsNull() {
				in.Skip()
				out.CarTypes = nil
			} else {
				in.Delim('[')
				if out.CarTypes == nil {
					if !in.IsDelim(']') {
						out.CarTypes = make([]CarType, 0, 2)
					} else {
						out.CarTypes = []CarType{}
					}
				} else {
					out.CarTypes = (out.CarTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v29 CarType
					(v29).UnmarshalEasyJSON(in)
					out.CarTypes = append(out.CarTypes, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "QueueSize":
			out.QueueSize = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels17(out *jwriter.Writer, in CarWash) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Address != "" {
		const prefix string = ",\"Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Latitude))
	}
	if in.Owner != "" {
		const prefix string = ",\"Owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Owner))
	}
	if in.Photo != "" {
		const prefix string = ",\"Photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo))
	}
	if in.Status != 0 {
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Status))
	}
	if len(in.Services) != 0 {
		const prefix string = ",\"Services\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Services {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.CarTypes) != 0 {
		const prefix string = ",\"CarTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.CarTypes {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"QueueSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.QueueSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CarWash) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CarWash) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CarWash) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CarWash) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels17(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels18(in *jlexer.Lexer, out *CarType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "CarWashID":
			out.CarWashID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels18(out *jwriter.Writer, in CarType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"CarWashID\":"
		out.RawString(prefix)
		out.Uint(uint(in.CarWashID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CarType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CarType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CarType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CarType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels18(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels19(in *jlexer.Lexer, out *BookingService) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ServiceID":
			out.ServiceID = uint(in.Uint())
		case "Service":
			(out.Service).UnmarshalEasyJSON(in)
		case "Booking":
			out.Booking = string(in.String())
		case "Cost":
			out.Cost = uint(in.Uint())
		case "Duration":
			out.Duration = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels19(out *jwriter.Writer, in BookingService) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ServiceID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ServiceID))
	}
	{
		const prefix string = ",\"Service\":"
		out.RawString(prefix)
		(in.Service).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Booking\":"
		out.RawString(prefix)
		out.String(string(in.Booking))
	}
	{
		const prefix string = ",\"Cost\":"
		out.RawString(prefix)
		out.Uint(uint(in.Cost))
	}
	{
		const prefix string = ",\"Duration\":"
		out.RawString(prefix)
		out.Uint(uint(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BookingService) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BookingService) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BookingService) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BookingService) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels19(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels20(in *jlexer.Lexer, out *Booking) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "CarWash":
			out.CarWash = uint(in.Uint())
		case "ClientUUID":
			out.ClientUUID = string(in.String())
		case "Client":
			(out.Client).UnmarshalEasyJSON(in)
		case "CarNumber":
			out.CarNumber = string(in.String())
		case "Cost":
			out.Cost = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "PaymentStatus":
			out.PaymentStatus = uint(in.Uint())
		case "Status":
			out.Status = uint(in.Uint())
		case "Order":
			out.Order = uint(in.Uint())
		case "CarModel":
			out.CarModel = string(in.String())
		case "Vehicle":
			out.Vehicle = string(in.String())
		case "BookingServices":
			if in.IsNull() {
				in.Skip()
				out.BookingServices = nil
			} else {
				in.Delim('[')
				if out.BookingServices == nil {
					if !in.IsDelim(']') {
						out.BookingServices = make([]BookingService, 0, 1)
					} else {
						out.BookingServices = []BookingService{}
					}
				} else {
					out.BookingServices = (out.BookingServices)[:0]
				}
				for !in.IsDelim(']') {
					var v34 BookingService
					(v34).UnmarshalEasyJSON(in)
					out.BookingServices = append(out.BookingServices, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WokerID":
			out.WokerID = uint(in.Uint())
		case "RemoteBooked":
			out.RemoteBooked = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels20(out *jwriter.Writer, in Booking) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"CarWash\":"
		out.RawString(prefix)
		out.Uint(uint(in.CarWash))
	}
	{
		const prefix string = ",\"ClientUUID\":"
		out.RawString(prefix)
		out.String(string(in.ClientUUID))
	}
	{
		const prefix string = ",\"Client\":"
		out.RawString(prefix)
		(in.Client).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"CarNumber\":"
		out.RawString(prefix)
		out.String(string(in.CarNumber))
	}
	{
		const prefix string = ",\"Cost\":"
		out.RawString(prefix)
		out.Uint(uint(in.Cost))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"PaymentStatus\":"
		out.RawString(prefix)
		out.Uint(uint(in.PaymentStatus))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Uint(uint(in.Status))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Uint(uint(in.Order))
	}
	{
		const prefix string = ",\"CarModel\":"
		out.RawString(prefix)
		out.String(string(in.CarModel))
	}
	{
		const prefix string = ",\"Vehicle\":"
		out.RawString(prefix)
		out.String(string(in.Vehicle))
	}
	{
		const prefix string = ",\"BookingServices\":"
		out.RawString(prefix)
		if in.BookingServices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.BookingServices {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"WokerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.WokerID))
	}
	{
		const prefix string = ",\"RemoteBooked\":"
		out.RawString(prefix)
		out.Uint(uint(in.RemoteBooked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Booking) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Booking) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Booking) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Booking) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels20(l, v)
}
func easyjsonD2b7633eDecodeCarwashesModels21(in *jlexer.Lexer, out *Admin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "SecondName":
			out.SecondName = string(in.String())
		case "MiddleName":
			out.MiddleName = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "ConfirmPassword":
			out.ConfirmPassword = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "AccessToken":
			out.AccessToken = string(in.String())
		case "RefreshToken":
			out.RefreshToken = string(in.String())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeCarwashesModels21(out *jwriter.Writer, in Admin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"SecondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"MiddleName\":"
		out.RawString(prefix)
		out.String(string(in.MiddleName))
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	if in.Password != "" {
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.ConfirmPassword != "" {
		const prefix string = ",\"ConfirmPassword\":"
		out.RawString(prefix)
		out.String(string(in.ConfirmPassword))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"AccessToken\":"
		out.RawString(prefix)
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"RefreshToken\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	if true {
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Admin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeCarwashesModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Admin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeCarwashesModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Admin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeCarwashesModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Admin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeCarwashesModels21(l, v)
}
